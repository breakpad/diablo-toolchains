diff --git a/tools/clang/include/clang/Driver/Driver.h b/tools/clang/include/clang/Driver/Driver.h
index b752ce6..85d30a7 100644
--- a/tools/clang/include/clang/Driver/Driver.h
+++ b/tools/clang/include/clang/Driver/Driver.h
@@ -64,6 +64,9 @@ public:
   /// command line.
   std::string Dir;
 
+  /// The prefix of the clang executable.
+  std::string Prefix;
+
   /// The original path to the clang executable.
   std::string ClangExecutable;
 
diff --git a/tools/clang/include/clang/Driver/ToolChain.h b/tools/clang/include/clang/Driver/ToolChain.h
index 509e08d..8febfbb 100644
--- a/tools/clang/include/clang/Driver/ToolChain.h
+++ b/tools/clang/include/clang/Driver/ToolChain.h
@@ -93,6 +93,11 @@ public:
     return Triple.getTriple();
   }
 
+  virtual void AddLinkSearchPathArgs(const ArgList &Args,
+                                     ArgStringList &CmdArgs) const;
+  virtual void AddIncludeSearchPathArgs(const ArgList &Args,
+                                        ArgStringList &CmdArgs) const;
+
   path_list &getFilePaths() { return FilePaths; }
   const path_list &getFilePaths() const { return FilePaths; }
 
diff --git a/tools/clang/lib/Driver/Driver.cpp b/tools/clang/lib/Driver/Driver.cpp
index 68471ec..db4b63a 100644
--- a/tools/clang/lib/Driver/Driver.cpp
+++ b/tools/clang/lib/Driver/Driver.cpp
@@ -43,6 +43,10 @@
 using namespace clang::driver;
 using namespace clang;
 
+static llvm::Triple computeTargetTriple(StringRef DefaultTargetTriple,
+        const ArgList &Args,
+        StringRef DarwinArchName);
+
 Driver::Driver(StringRef ClangExecutable,
                StringRef DefaultTargetTriple,
                StringRef DefaultImageName,
@@ -290,6 +294,17 @@ Compilation *Driver::BuildCompilation(ArrayRef<const char *> ArgList) {
   }
   if (const Arg *A = Args->getLastArg(options::OPT__sysroot_EQ))
     SysRoot = A->getValue();
+  else if (const Arg *A = Args->getLastArg(options::OPT_isysroot)) {
+    SysRoot = A->getValue();
+  } else {
+    if (!Dir.empty()) {
+      SmallString<128> P = llvm::sys::path::filename(Dir);
+      llvm::sys::path::remove_filename(P); // Remove /bin from foo/bin
+      llvm::sys::path::append(P,this->Prefix);
+      llvm::sys::path::append(P,"sysroot");
+      SysRoot = P.str();
+    }
+  }
   if (Args->hasArg(options::OPT_nostdlib))
     UseStdLib = false;
 
diff --git a/tools/clang/lib/Driver/ToolChain.cpp b/tools/clang/lib/Driver/ToolChain.cpp
index de8ed1d..0f86803 100644
--- a/tools/clang/lib/Driver/ToolChain.cpp
+++ b/tools/clang/lib/Driver/ToolChain.cpp
@@ -22,6 +22,13 @@
 using namespace clang::driver;
 using namespace clang;
 
+#define CLANG_STRINGIFY(x) #x
+#define CLANG_TOSTRING(x) CLANG_STRINGIFY(x)
+#ifndef CLANG_GCC_VERSION
+#define CLANG_GCC_VERSION
+#endif
+#define CLANG_GCC_VERSION_STR CLANG_TOSTRING(CLANG_GCC_VERSION)
+
 ToolChain::ToolChain(const Driver &D, const llvm::Triple &T)
   : D(D), Triple(T) {
 }
@@ -52,12 +59,54 @@ bool ToolChain::IsUnwindTablesDefault() const {
   return false;
 }
 
+void ToolChain::AddIncludeSearchPathArgs(const ArgList &Args, ArgStringList &CmdArgs) const {
+  std::string GccVersion(CLANG_GCC_VERSION_STR);
+
+  // Checks
+  if (getDriver().Dir.empty() || GccVersion.empty()) {
+    return;
+  }
+
+  SmallString<128> P(getDriver().Dir);
+  llvm::sys::path::remove_filename(P); // Remove /bin from foo/bin
+  llvm::sys::path::append(P, "lib/gcc", getDriver().Prefix, GccVersion);
+  llvm::sys::path::append(P, "../../../..", getDriver().Prefix, "include");
+
+  CmdArgs.push_back(Args.MakeArgString("-I" + P.str()));
+}
+
+void ToolChain::AddLinkSearchPathArgs(const ArgList &Args, ArgStringList &CmdArgs) const {
+  std::string GccVersion(CLANG_GCC_VERSION_STR);
+
+  // Checks
+  if (getDriver().Dir.empty() || GccVersion.empty()) {
+    return;
+  }
+
+  SmallString<128> P(getDriver().Dir);
+  llvm::sys::path::remove_filename(P); // Remove /bin from foo/bin
+  llvm::sys::path::append(P, "lib/gcc", getDriver().Prefix, GccVersion);
+  llvm::sys::path::append(P, "../../../..", getDriver().Prefix, "lib");
+
+  CmdArgs.push_back(Args.MakeArgString("-L" + P.str()));
+}
+
 std::string ToolChain::GetFilePath(const char *Name) const {
   return D.GetFilePath(Name, *this);
 
 }
 
 std::string ToolChain::GetProgramPath(const char *Name) const {
+  if(getDriver().Prefix != "") {
+    // first try prefixed with Driver::Prefix
+    std::string targetName = getDriver().Prefix;
+    targetName += "-";
+    targetName += Name;
+    std::string targetProgram = D.GetProgramPath(targetName.c_str(), *this);
+    if(targetProgram != targetName) {
+      return targetProgram;
+    }
+  }
   return D.GetProgramPath(Name, *this);
 }
 
diff --git a/tools/clang/lib/Driver/Tools.cpp b/tools/clang/lib/Driver/Tools.cpp
index e37959b..1fb8963 100644
--- a/tools/clang/lib/Driver/Tools.cpp
+++ b/tools/clang/lib/Driver/Tools.cpp
@@ -1617,6 +1617,12 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
   std::string TripleStr = getToolChain().ComputeEffectiveClangTriple(Args);
   CmdArgs.push_back(Args.MakeArgString(TripleStr));
 
+  // Set sysroot
+  if(!D.SysRoot.empty()) {
+    CmdArgs.push_back("-isysroot");
+    CmdArgs.push_back(Args.MakeArgString(D.SysRoot));
+  }
+
   // Select the appropriate action.
   RewriteKind rewriteKind = RK_None;
   
@@ -2258,6 +2264,12 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
   // preprocessed inputs and configure concludes that -fPIC is not supported.
   Args.ClaimAllArgs(options::OPT_D);
 
+  if (isa<LinkJobAction>(JA)) {
+      getToolChain().AddLinkSearchPathArgs(Args, CmdArgs);
+  } else {
+      getToolChain().AddIncludeSearchPathArgs(Args, CmdArgs);
+  }
+
   // Manually translate -O to -O2 and -O4 to -O3; let clang reject
   // others.
   if (Arg *A = Args.getLastArg(options::OPT_O_Group)) {
@@ -4547,6 +4559,15 @@ void darwin::Link::AddLinkArgs(Compilation &C,
     CmdArgs.push_back(A->getValue());
   }
 
+  std::string libPath;
+  bool Exists;
+  //libPath = D.Dir + "/../lib/gcc/" + D.Prefix + "/4.2.1";
+  //if (!llvm::sys::fs::exists(libPath, Exists) && Exists)
+  //  CmdArgs.push_back(Args.MakeArgString("-L" + libPath));
+  libPath = D.SysRoot + "/usr/lib/gcc/" + D.Prefix + "/4.2.1";
+  if (!llvm::sys::fs::exists(libPath, Exists) && Exists)
+    CmdArgs.push_back(Args.MakeArgString("-L" + libPath));
+
   Args.AddLastArg(CmdArgs, options::OPT_twolevel__namespace);
   Args.AddLastArg(CmdArgs, options::OPT_twolevel__namespace__hints);
   Args.AddAllArgs(CmdArgs, options::OPT_umbrella);
diff --git a/tools/clang/tools/driver/driver.cpp b/tools/clang/tools/driver/driver.cpp
index 81979ec..7d1803a 100644
--- a/tools/clang/tools/driver/driver.cpp
+++ b/tools/clang/tools/driver/driver.cpp
@@ -277,6 +277,11 @@ static void ParseProgName(SmallVectorImpl<const char *> &ArgVector,
   // "x86_64-linux-clang" as interpreted as suffix "clang" with
   // target prefix "x86_64-linux". If such a target prefix is found,
   // is gets added via -target as implicit first argument.
+  // .. with one caveat:
+  // Force i<N>86*darwin* to i386*darwin* as i386 has special meaning there
+  // of "The first Intel CPU that Darwin was available for, i.e. Yonah" while
+  // e.g. i686 means "The next Intel CPU after Pentium, i.e. Pentium Pro".
+
   static const struct {
     const char *Suffix;
     bool IsCXX;
@@ -326,9 +331,17 @@ static void ParseProgName(SmallVectorImpl<const char *> &ArgVector,
     ProgNameRef = ProgNameRef.slice(0, LastComponent);
   }
 
+  TheDriver.Prefix = Prefix;
+
   if (Prefix.empty())
     return;
 
+  // Force i<N>86*darwin* to i386*darwin* (see above for reason)
+  if (ProgName.find("darwin") != std::string::npos &&
+      ProgName[0] == 'i' && isdigit(ProgName[1]) &&
+      ProgName[2] == '8' && ProgName[3] == '6')
+    ProgName[1] = '3';
+
   std::string IgnoredError;
   if (llvm::TargetRegistry::lookupTarget(Prefix, IgnoredError)) {
     SmallVectorImpl<const char *>::iterator it = ArgVector.begin();
