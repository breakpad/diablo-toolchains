diff --git a/tools/clang/include/clang/Driver/Driver.h b/tools/clang/include/clang/Driver/Driver.h
index 67d67c3..f3768c9 100644
--- a/tools/clang/include/clang/Driver/Driver.h
+++ b/tools/clang/include/clang/Driver/Driver.h
@@ -76,6 +76,9 @@ public:
   /// command line.
   std::string Dir;
 
+  /// The prefix of the clang executable.
+  std::string Prefix;
+
   /// The original path to the clang executable.
   std::string ClangExecutable;
 
diff --git a/tools/clang/include/clang/Driver/ToolChain.h b/tools/clang/include/clang/Driver/ToolChain.h
index 3092e81..5ac93d9 100644
--- a/tools/clang/include/clang/Driver/ToolChain.h
+++ b/tools/clang/include/clang/Driver/ToolChain.h
@@ -124,6 +124,13 @@ public:
     return Triple.getTriple();
   }
 
+  virtual void AddLinkSearchPathArgs(const llvm::opt::ArgList &Args,
+                                     llvm::opt::ArgStringList &CmdArgs) const;
+  virtual void AddIncludeSearchPathArgs(const llvm::opt::ArgList &Args,
+                                        llvm::opt::ArgStringList &CmdArgs) const;
+  virtual void AddCPlusPlusIncludeSearchPathArgs(const llvm::opt::ArgList &Args,
+                                                 llvm::opt::ArgStringList &CmdArgs) const;
+
   path_list &getFilePaths() { return FilePaths; }
   const path_list &getFilePaths() const { return FilePaths; }
 
diff --git a/tools/clang/lib/Driver/Driver.cpp b/tools/clang/lib/Driver/Driver.cpp
index 1664d0d..3c8a3e7 100644
--- a/tools/clang/lib/Driver/Driver.cpp
+++ b/tools/clang/lib/Driver/Driver.cpp
@@ -44,6 +44,10 @@ using namespace clang::driver;
 using namespace clang;
 using namespace llvm::opt;
 
+static llvm::Triple computeTargetTriple(StringRef DefaultTargetTriple,
+                                        const ArgList &Args,
+                                        StringRef DarwinArchName);
+
 Driver::Driver(StringRef ClangExecutable,
                StringRef DefaultTargetTriple,
                DiagnosticsEngine &Diags)
@@ -356,6 +360,16 @@ Compilation *Driver::BuildCompilation(ArrayRef<const char *> ArgList) {
   }
   if (const Arg *A = Args->getLastArg(options::OPT__sysroot_EQ))
     SysRoot = A->getValue();
+  else if (const Arg *A = Args->getLastArg(options::OPT_isysroot)) {
+    SysRoot = A->getValue();
+  } else {
+      if (!Dir.empty()) {
+        SmallString<256> P = llvm::sys::path::parent_path(Dir);
+        llvm::sys::path::append(P,this->Prefix);
+        llvm::sys::path::append(P,"sysroot");
+        SysRoot = P.str();
+      }
+  }
   if (const Arg *A = Args->getLastArg(options::OPT__dyld_prefix_EQ))
     DyldPrefix = A->getValue();
   if (Args->hasArg(options::OPT_nostdlib))
diff --git a/tools/clang/lib/Driver/ToolChain.cpp b/tools/clang/lib/Driver/ToolChain.cpp
index 2bcfecf..3d261bf 100644
--- a/tools/clang/lib/Driver/ToolChain.cpp
+++ b/tools/clang/lib/Driver/ToolChain.cpp
@@ -26,6 +26,13 @@ using namespace clang::driver;
 using namespace clang;
 using namespace llvm::opt;
 
+#define CLANG_STRINGIFY(x) #x
+#define CLANG_TOSTRING(x) CLANG_STRINGIFY(x)
+#ifndef CLANG_GCC_VERSION
+#define CLANG_GCC_VERSION
+#endif
+#define CLANG_GCC_VERSION_STR CLANG_TOSTRING(CLANG_GCC_VERSION)
+
 ToolChain::ToolChain(const Driver &D, const llvm::Triple &T,
                      const ArgList &Args)
   : D(D), Triple(T), Args(Args) {
@@ -145,12 +152,77 @@ Tool *ToolChain::SelectTool(const JobAction &JA) const {
   return getTool(AC);
 }
 
+void ToolChain::AddIncludeSearchPathArgs(const ArgList &Args, ArgStringList &CmdArgs) const {
+  std::string GccVersion(CLANG_GCC_VERSION_STR);
+
+  // Checks
+  if (getDriver().Dir.empty() || GccVersion.empty()) {
+    return;
+  }
+
+  SmallString<128> P(getDriver().Dir);
+  llvm::sys::path::remove_filename(P); // Remove /bin from foo/bin
+  llvm::sys::path::append(P, "lib/gcc", getDriver().Prefix, GccVersion);
+  llvm::sys::path::append(P, "../../../..", getDriver().Prefix, "include");
+
+  CmdArgs.push_back(Args.MakeArgString("-I" + P.str()));
+}
+
+void ToolChain::AddCPlusPlusIncludeSearchPathArgs(const llvm::opt::ArgList &Args, ArgStringList &CmdArgs) const {
+  std::string GccVersion(CLANG_GCC_VERSION_STR);
+
+  // Checks
+  if (getDriver().Dir.empty() || GccVersion.empty()) {
+    return;
+  }
+
+  SmallString<128> P(getDriver().Dir);
+  llvm::sys::path::remove_filename(P); // Remove /bin from foo/bin
+  llvm::sys::path::append(P, "lib/gcc", getDriver().Prefix, GccVersion);
+  llvm::sys::path::append(P, "../../../..", getDriver().Prefix, "/include/c++/", GccVersion);
+
+  SmallString<128> PT(P);
+  SmallString<128> PB(P);
+
+  llvm::sys::path::append(PT, getDriver().Prefix);
+  llvm::sys::path::append(PB, "backward");
+  CmdArgs.push_back(Args.MakeArgString("-I" + P.str()));
+  CmdArgs.push_back(Args.MakeArgString("-I" + PT.str()));
+  CmdArgs.push_back(Args.MakeArgString("-I" + PB.str()));
+}
+
+void ToolChain::AddLinkSearchPathArgs(const llvm::opt::ArgList &Args, ArgStringList &CmdArgs) const {
+  std::string GccVersion(CLANG_GCC_VERSION_STR);
+
+  // Checks
+  if (getDriver().Dir.empty() || GccVersion.empty()) {
+    return;
+  }
+
+  SmallString<128> P(getDriver().Dir);
+  llvm::sys::path::remove_filename(P); // Remove /bin from foo/bin
+  llvm::sys::path::append(P, "lib/gcc", getDriver().Prefix, GccVersion);
+  llvm::sys::path::append(P, "../../../..", getDriver().Prefix, "lib");
+
+  CmdArgs.push_back(Args.MakeArgString("-L" + P.str()));
+}
+
 std::string ToolChain::GetFilePath(const char *Name) const {
   return D.GetFilePath(Name, *this);
 
 }
 
 std::string ToolChain::GetProgramPath(const char *Name) const {
+  if(getDriver().Prefix != "") {
+    // first try prefixed with Driver::Prefix
+    std::string targetName = getDriver().Prefix;
+    targetName += "-";
+    targetName += Name;
+    std::string targetProgram = D.GetProgramPath(targetName.c_str(), *this);
+    if(targetProgram != targetName) {
+      return targetProgram;
+    }
+  }
   return D.GetProgramPath(Name, *this);
 }
 
diff --git a/tools/clang/lib/Driver/Tools.cpp b/tools/clang/lib/Driver/Tools.cpp
index 75eef9e..8713dc5 100644
--- a/tools/clang/lib/Driver/Tools.cpp
+++ b/tools/clang/lib/Driver/Tools.cpp
@@ -3396,6 +3396,15 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
   // preprocessed inputs and configure concludes that -fPIC is not supported.
   Args.ClaimAllArgs(options::OPT_D);
 
+  if (isa<LinkJobAction>(JA)) {
+     getToolChain().AddLinkSearchPathArgs(Args, CmdArgs);
+  } else {
+     if (types::isCXX(InputType)) {
+       getToolChain().AddCPlusPlusIncludeSearchPathArgs(Args, CmdArgs);
+     }
+     getToolChain().AddIncludeSearchPathArgs(Args, CmdArgs);
+  }
+
   // Manually translate -O4 to -O3; let clang reject others.
   if (Arg *A = Args.getLastArg(options::OPT_O_Group)) {
     if (A->getOption().matches(options::OPT_O4)) {
@@ -5803,6 +5812,14 @@ void darwin::Link::AddLinkArgs(Compilation &C,
     CmdArgs.push_back(A->getValue());
   }
 
+  std::string libPath;
+  //libPath = D.Dir + "/../lib/gcc/" + D.Prefix + "/4.2.1";
+  //if (!llvm::sys::fs::exists(libPath, Exists) && Exists)
+  //  CmdArgs.push_back(Args.MakeArgString("-L" + libPath));
+  libPath = D.SysRoot + "/usr/lib/gcc/" + D.Prefix + "/4.2.1";
+  if (llvm::sys::fs::exists(libPath))
+    CmdArgs.push_back(Args.MakeArgString("-L" + libPath));
+
   Args.AddLastArg(CmdArgs, options::OPT_twolevel__namespace);
   Args.AddLastArg(CmdArgs, options::OPT_twolevel__namespace__hints);
   Args.AddAllArgs(CmdArgs, options::OPT_umbrella);
diff --git a/tools/clang/lib/Frontend/InitHeaderSearch.cpp b/tools/clang/lib/Frontend/InitHeaderSearch.cpp
index a518a0a..64eca27 100644
--- a/tools/clang/lib/Frontend/InitHeaderSearch.cpp
+++ b/tools/clang/lib/Frontend/InitHeaderSearch.cpp
@@ -314,14 +314,8 @@ void InitHeaderSearch::AddDefaultCIncludePaths(const llvm::Triple &triple,
       break;
     case llvm::Triple::GNU:
       // mingw-w64 crt include paths
-      // <sysroot>/i686-w64-mingw32/include
       SmallString<128> P = StringRef(HSOpts.ResourceDir);
-      llvm::sys::path::append(P, "../../../i686-w64-mingw32/include");
-      AddPath(P.str(), System, false);
-
-      // <sysroot>/x86_64-w64-mingw32/include
-      P.resize(HSOpts.ResourceDir.size());
-      llvm::sys::path::append(P, "../../../x86_64-w64-mingw32/include");
+      llvm::sys::path::append(P, "../../../" + triple.getTriple() + "include"); // <sysroot>/i686-w64-mingw32/include
       AddPath(P.str(), System, false);
 
       // mingw.org crt include paths
diff --git a/tools/clang/tools/driver/driver.cpp b/tools/clang/tools/driver/driver.cpp
index e1f9367..9dfeae5 100644
--- a/tools/clang/tools/driver/driver.cpp
+++ b/tools/clang/tools/driver/driver.cpp
@@ -231,7 +231,7 @@ static const DriverSuffix *FindDriverSuffix(StringRef ProgName) {
 }
 
 static void ParseProgName(SmallVectorImpl<const char *> &ArgVector,
-                          std::set<std::string> &SavedStrings) {
+                          std::set<std::string> &SavedStrings, Driver& TheDriver) {
   // Try to infer frontend type and default target from the program name by
   // comparing it against DriverSuffixes in order.
 
@@ -279,6 +279,7 @@ static void ParseProgName(SmallVectorImpl<const char *> &ArgVector,
 
     // Infer target from the prefix.
     StringRef Prefix = ProgNameRef.slice(0, LastComponent);
+    TheDriver.Prefix = Prefix;
     std::string IgnoredError;
     if (llvm::TargetRegistry::lookupTarget(Prefix, IgnoredError)) {
       auto it = ArgVector.begin();
@@ -460,7 +461,7 @@ int main(int argc_, const char **argv_) {
   SetInstallDir(argv, TheDriver);
 
   llvm::InitializeAllTargets();
-  ParseProgName(argv, SavedStrings);
+  ParseProgName(argv, SavedStrings, TheDriver);
 
   SetBackdoorDriverOutputsFromEnvVars(TheDriver);
 
